<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Trganda&#39;s Blog</title>
        <link>http://example.org/</link>
        <description>Trganda&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 03 Apr 2020 22:57:07 &#43;0000</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Vim Usage</title>
    <link>http://example.org/posts/vim-usage/</link>
    <pubDate>Tue, 20 Oct 2020 22:41:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/vim-usage/</guid>
    <description><![CDATA[介绍 以下记录使用vim的过程中学习到的东西（快捷键，插件，遇到的问题等）。
常用命令 下面列出我常用到的命令和其作用。
分屏 分屏有两种，垂直或者水平分屏。]]></description>
</item><item>
    <title>Hugo 构建Github Pages</title>
    <link>http://example.org/posts/build-website-with-hugo/</link>
    <pubDate>Mon, 19 Oct 2020 23:25:57 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/build-website-with-hugo/</guid>
    <description><![CDATA[背景 决定从Hexo迁移至Hugo，不再使用Hexo了。由于Hexo的官方文档缺乏维护，对我而且使用起来不方便，其次也不利于主题的开发。迁移的方法并不复杂，下面让我们开始吧。
前置需求 我们需要，
 一个your_github_user_name.github.io仓库； 一个用于保存Hugo内容的仓库（假设名字为blog）； travis ci账户，使用github账户登录并赋予其访问相关仓库的权限即可； 有条件的话，可以申请一个自己的域名。  编写 .travis.yml 现在假设你已经将Hugo创建的文件保存至blog仓库了，为了让travis ci帮我们进行自动部署，还需要在blog仓库的根目录下放置一个.travis.yml配置文件，用于告知travis ci该如何进行操作。 .travis.yml文件的内容如下（仅限参考），
# 使用Ubuntu20.04dist:focallanguage:gogo:- 1.15# 安装Hugobefore_install:- sudoapt-getupdate- sudoapt-getinstallhugo-y--fix-missingscript:- hugo-Ddeploy:repo:your_github_user_name/your_github_user_name.github.ioprovider:pagesskip-cleanup:truegithub-token:$GH_TOKENkeep-history:true# 目前github上创建仓库后的主分支名变为了main，你需要把*.github.io的主分支名改为mastertarget_branch:masteron:branch:mainlocal-dir:public# 自定义域名，可以不添加该字段fqdn:your_domaindeploy字段中各个值的含义，可以参看travis ci的官方文档[1]。
将.travis.yml文件提交至你的blog仓库中，之后我们需要在travis ci中，进行配置，为我们的blog仓库添加一个环境变量（GH_TOKEN）。
你可以在 github.com-&gt;setting-&gt;Developer setting-&gt;Personal access tokens中生成一个，并设置相应权限。
参考  Github Pages Deployment: https://docs.travis-ci.com/user/deployment/pages/  ]]></description>
</item><item>
    <title>删除Git Submodule</title>
    <link>http://example.org/posts/how-to-remove-git-submodule/</link>
    <pubDate>Mon, 19 Oct 2020 20:17:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/how-to-remove-git-submodule/</guid>
    <description><![CDATA[问题 git中没有提供直接删除submodule的命令，所以当我们想要删除某个submodule时，会不知所措。
方法 github上有人给出了删除submodule的方法，步骤如下：
 删除.gitmodules文件中的相关内容 删除.git/config文件中的相关内容 执行git rm --cached path_to_your_submodule(不要在后面加斜杠) 执行rm -rf .git/modules/path_to_your_submodule(不要在后面加斜杠) 删除你的submodules文件，执行rm -rf path_to_your_submodule 执行git add .gitmodules并commit  参考  delete_git_submodule: https://gist.github.com/myusuf3/7f645819ded92bda6677  ]]></description>
</item><item>
    <title>WSL中开启，SSh Agent自启动</title>
    <link>http://example.org/posts/ssh-agent-startup-on-wsl/</link>
    <pubDate>Mon, 19 Oct 2020 16:12:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/ssh-agent-startup-on-wsl/</guid>
    <description><![CDATA[ohmyzsh 插件 在安装了ohmyzsh的情况下，编辑.vimrc文件，并启用ssh-agent插件即可。插件会在开启zsh时，启动ssh-agent，并添加.ssh目录下的identifier。
参考  ssh-agent : https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ssh-agent  ]]></description>
</item></channel>
</rss>
