<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Trganda&#39;s Blog</title>
        <link>http://example.org/</link>
        <description>Trganda&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 03 Apr 2020 22:57:07 &#43;0000</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Vim Usage</title>
    <link>http://example.org/posts/vim-usage/</link>
    <pubDate>Tue, 20 Oct 2020 22:41:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/vim-usage/</guid>
    <description><![CDATA[介绍 以下记录使用vim的过程中学习到的东西（快捷键，插件，遇到的问题等）。
常用命令 下面列出我常用到的命令和其作用。
分屏  垂直分屏：:vsplit； 水平分屏：:split；  控制分屏窗口大小 默认情况下，通过分屏命令弹出的窗口都是均匀划分的。你可以像下面这样调整当前窗口的大小（高和宽），
 调整高度：:resize number； 调整宽度：:vertical resize number；  也可以用递增或递减的方式来调整，
 增加高度：:resize +number； 减少高度：:resize -number；  切换窗口 在通过:split和vsplit命令进行划分之后，需要进行窗口的切换。
可以双击ctrl + w进行轮流切换，也可以通过ctrl + w + 方向键（或者hjkl）来切换到指定的窗口。
Tab 当你需要打开多个文件，而当前tab又没有多余空间使用是，你可以创建一个新的tab。 tab会以数字下标排序，显示在顶部，像下面这样,
常用的操控tab的命令如下，
 创建一个新的tab：:tabnew 在tab间进行切换：gt 切换至下一个tab：:tabnext 切换至上一个tab：:tabprevious 切换至第一个tab：:tabfirst 切换至最后一个tab：:tablast 将当前tab移动到某个index：:tabmove number，number从0开始  拓展工具 推荐使用vimrc。 vimrc是vim的一款配置工具，安装后会自动帮你配置vim的样式，字体和各类插件。
vimrc的安装方法，见项目README。
插件 vimrc帮我们集成了很多实用的插件[2]。这里列出我常用的，以及它们的使用方法。
NERDtree NERD Tree可以让我们在vim中便捷的访问目录结构，在NOMAL模式下，输入:NERDTree后，会在右侧显示一个explorer。
常用的快捷键如下（需要先切换至NERDTree打开的窗口）：
 刷新当前根目录：O，输入shift + o即可; 刷新当前光标所指的目录：o； 在新的tab中打开当前文件或目录：t； 在新的tab中打开当前文件或目录，但不切换过去：T； 显示隐藏文件I  如果你想让NERD Tree始终显示隐藏文件，你可以修改.vimrc文件，并在末尾加上如下内容，
1  let NERDTreeShowHidden=1  参考  Resize split more quickly: https://vim.]]></description>
</item><item>
    <title>Hugo 构建Github Pages</title>
    <link>http://example.org/posts/build-website-with-hugo/</link>
    <pubDate>Mon, 19 Oct 2020 23:25:57 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/build-website-with-hugo/</guid>
    <description><![CDATA[背景 决定从Hexo迁移至Hugo，不再使用Hexo了。由于Hexo的官方文档缺乏维护，对我而且使用起来不方便，其次也不利于主题的开发。迁移的方法并不复杂，下面让我们开始吧。
前置需求 我们需要，
 一个your_github_user_name.github.io仓库； 一个用于保存Hugo内容的仓库（假设名字为blog）； travis ci账户，使用github账户登录并赋予其访问相关仓库的权限即可； 有条件的话，可以申请一个自己的域名。  编写 .travis.yml 现在假设你已经将Hugo创建的文件保存至blog仓库了，为了让travis ci帮我们进行自动部署，还需要在blog仓库的根目录下放置一个.travis.yml配置文件，用于告知travis ci该如何进行操作。 .travis.yml文件的内容如下（仅限参考），
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # 使用Ubuntu20.04dist:focallanguage:gogo:- 1.15# 安装Hugobefore_install:- sudoapt-getupdate- sudoapt-getinstallhugo-y--fix-missingscript:- hugo-Ddeploy:repo:your_github_user_name/your_github_user_name.github.ioprovider:pagesskip-cleanup:truegithub-token:$GH_TOKENkeep-history:true# 目前github上创建仓库后的主分支名变为了main，你需要把*.github.io的主分支名改为mastertarget_branch:masteron:branch:mainlocal-dir:public# 自定义域名，可以不添加该字段fqdn:your_domain  deploy字段中各个值的含义，可以参看travis ci的官方文档[1]。
将.travis.yml文件提交至你的blog仓库中，之后我们需要在travis ci中，进行配置，为我们的blog仓库添加一个环境变量（GH_TOKEN）。
你可以在 github.com-&gt;setting-&gt;Developer setting-&gt;Personal access tokens中生成一个，并设置相应权限。
参考  Github Pages Deployment: https://docs.travis-ci.com/user/deployment/pages/  ]]></description>
</item><item>
    <title>删除Git Submodule</title>
    <link>http://example.org/posts/how-to-remove-git-submodule/</link>
    <pubDate>Mon, 19 Oct 2020 20:17:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/how-to-remove-git-submodule/</guid>
    <description><![CDATA[问题 git中没有提供直接删除submodule的命令，所以当我们想要删除某个submodule时，会不知所措。
方法 github上有人给出了删除submodule的方法，步骤如下：
 删除.gitmodules文件中的相关内容 删除.git/config文件中的相关内容 执行git rm --cached path_to_your_submodule(不要在后面加斜杠) 执行rm -rf .git/modules/path_to_your_submodule(不要在后面加斜杠) 删除你的submodules文件，执行rm -rf path_to_your_submodule 执行git add .gitmodules并commit  参考  delete_git_submodule: https://gist.github.com/myusuf3/7f645819ded92bda6677  ]]></description>
</item><item>
    <title>WSL中开启，SSh Agent自启动</title>
    <link>http://example.org/posts/ssh-agent-startup-on-wsl/</link>
    <pubDate>Mon, 19 Oct 2020 16:12:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/ssh-agent-startup-on-wsl/</guid>
    <description><![CDATA[ohmyzsh 插件 在安装了ohmyzsh的情况下，编辑.vimrc文件，并启用ssh-agent插件即可。插件会在开启zsh时，启动ssh-agent，并添加.ssh目录下的identifier。
参考  ssh-agent : https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ssh-agent  ]]></description>
</item></channel>
</rss>
